//clases

INICIO PERSONAS tipo abstracto
	variables (dni, nombre, apellidos, telefono_movil, fecha_nacimiento, cuenta_bancaria, direccion, tipo_persona,sueldo)
	crear getter y setter de las variables
FIN PERSONAS
INICIO ASESOR HEREDA DE PERSONAS
	variable trabajo_asesor<-"Asesor"
	crear constructor vacio,getter, setter y toString
FIN ASESOR
INICIO MECANICO HEREDA DE PERSONAS
	variable trabajo_mecanico<- "Mecanico"
	crear constructor vacio,getter, setter y toString
FIN MECANICO
INICIO CLIENTE HEREDA DE PERSONAS
	variables compraCoche, compraMoto
	crear constructor vacio,getter, setter y toString
FIN CLIENTE
INICIO VEHICULOS tipo abstracto
	variables (matricula, modelo, color, combustible, plazas,precio, kilometro)
	crear getter y setter de las variables
FIN VEHICULOS
INICIO COCHES HEREDA DE VEHICULO
	variables(enReparacionCoche, vendidoCoche)
	crear constructor vacio,getter, setter y toString
FIN COCHES
INICIO MOTOS HEREDA DE VEHICULO
	VARIABLES(enReparacionMoto, vendidoMoto)
	crear constructor vacio,getter, setter y toString
FIN MOTOS

//main

INICIO MAIN 
	Crear objeto 
	Crear ArrayList
	hacer
		Preguntar si es Administrador, Empleado
		según <opcion>
		caso “Administrador”:
			//la primera vez que entra debe crear una cuenta admin
			Pregunta nombre de admin e introduce por teclado
			Pregunta la contraseña e introduce por teclado
			Preguntar Dinero Base>=(50000)
			//Fin de la primera vez :V
			Mostrar"Menu (alta/baja mostrar  vehiculo,empleado,modificar)"
			segun opcion
			caso alta empleado:
				Introducir datos(tipo de empleado,nombre,apellido,DNI,fecha de nacimiento,Cuenta bancaria,Direccion,Sueldo)
			caso baja empleado:
				Mostrar “Que trabajador quiere dar de baja?”
				Mostrar “Introduce DNI”
				Escribe dni
				Mostrar objeto y pedir confirmacion
				//borrar objeto
			caso mostrar empleado:
				Mostrar “Que trabajador quiere ver?”
				Mostrar “Introduce DNI”
				Escribe dni
				//mostrar objeto
			caso modificar empleado:
				Mostrar “Que trabajador quiere modificar?”
				Mostrar “Introduce DNI”
				Escribe dni
				//mostrar objeto
				Preguntar "que quiere modificar"
				Mostrar opciones
				//edita y guarda objeto
			caso alta vehiculo:
				Mostrar "Que vehiculo quiere añadir?"
					"coche o moto"
				si "coche" hacer
					Mostrar “Introduce datos”
					Escribe datos de coche con relacion a vehiculo
					//indicar precio que vale
				si "moto" hacer
					Mostrar “Introduce datos”
					Escribe datos de moto con relacion a vehiculo
					//indicar precio que vale
			caso baja vehiculo:
				Mostrar "Que vehiculo quiere dar de baja?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				Mostrar objeto y pedir confirmacion
				//borrar objeto
			caso mostrar vehiculo:
				Mostrar "Que vehiculo quiere ver?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				mostrar objeto
			caso modificar vehiculo:
				Mostrar "Que vehiculo quiere modificar?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				mostrar objeto
				Preguntar "que quiere modificar"
				Mostrar opciones
				//edita y guarda objeto
			caso mostrar ganancias:
				Muestra el dinero base y las ganancias de venta de vehiculos y lo que se pierde con la compra de coche y moto
			
		Caso “trabajador”:
			segun dni
			caso "asesor":
				segun <opcion>	
				caso vender:
					escribe matricula
					si <vehiculo no ha sido vendido> hacer
						segun opcion
							caso cliente nuevo
								introducir (nombre,apellido,dni,direccion,telefono)
								el vehiculo pasa a estar como vendido junto a la fecha y hora 
							caso cliente antiguo
								introducir dni
								recorrer array y cuando encuentre al cliente
								el vehiculo pasa a estar como vendido junto a la fecha y hora 
					sino
						mostrar <venta cancelada>
					fin si
				caso comprar:
					introducir dni cliente
					mostrar vehiculos comprados(precio puesto por el cliente) 
					cambia el estado de vendido a 2º mano
				caso mostrar vehiculos:
					segun opcion
					caso mostrar coches
						con un bucle for recorre el array y muestra los que contenga coches
					caso mostrar motos
						con un bucle for recorre el array y muestra los que contenga motos
					caso mostrar vehiculo en especifico
						pedir matricula
						recorrer array y mostrar el que coincidad la matricula
				caso mostrar clientes:
					segun opcion
					caso mostrar todos
						con un bucle recorre array y muestra los que contenga cliente
					caso mostrar un cliente especifico
						pedir DNI
						recorre array y mostrar el que coincida dni
				caso modificar clientes:
					pedir DNI
					recorre array y muestra el que coincida dni
					pregunta que quiere modificar(nombre,apellido,dni,direccion,telefono)
				caso enviar a mecanico:
					se le indica al vehiculo como que esta en reparacion
				caso devolver vehiculo:
					se devuelve el vehiculo marcado como reparado al cliente asociado al vehiculo
			caso “Mecanico”:
				segun opcion
					caso mostrar vehiculo
						segun opcion
						caso mostrar coches
							con un bucle for recorre el array y muestra los que contenga coches
						caso mostrar motos
							con un bucle for recorre el array y muestra los que contenga motos
						caso mostrar vehiculo en especifico
							pedir matricula
							recorrer array y mostrar el que coincidad la matricula
					caso reparar vehiculo
						se marca los vehiculos en reparacion como reparados
					caso mostrar en reaparacion
						con un bucle for recorre el array y muestra los que contenga 'en reparacion'
					
	mientras<bucle>

FIN

//comprobaciones

INICIO DNI
	nombre de metodo<- validar
	llamamiento <- dni,validado
	valido<-false
	caracter<-0
	miDNI <- 0
	resto <- 0
	i <- 0
	asigletra[]<-('T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X','B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E')
	//comprobar si el dni recibido tiene 9 caracteres y si la ultima es una letra
	si <dni.length<-9 and Character.isLetter(dni.charAt(8))> hacer
		hacer
		caracter <- dni.codePointAt(i)
			//la suma de los caracteres este en el rango de <47 y 58>
         	       valido <-(caracter > 47 && caracter < 58)
                	incrementa i
		mientras(i < dni.length-1 and valido)
	fin si
	//comprueba que el ultimo caracter sea en mayuscula  y hace la operacon que da la letra del dni valido
	si <valido> hacer
		letra <- Character.toUpperCase(dni.charAt(8));
           	miDNI <- pasalo a entero [ Integer.parseInt(dni.substring(0,8))];
           	resto <- miDNI % 23;
           	valido <- (letra=asigLetra[resto]);
	fin si
	validado<-valido
	retorna validado(true o false)
FIN DNI

INICIO FECHA
	//con un boolean y un array de entero
	diasMes= {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	si <fecha contiene numeros en las posiciones 0-2/3-5/6-10 [fecha.matches("^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$")]> hacer
		entero	{dia<-convertir de String a int la posiscion 0-2[Integer.parseInt(fecha.substring(0, 2))]
			{mes<-convertir de String a int la posiscion 3-5[Integer.parseInt(fecha.substring(3, 5))]
			{anio<-convertir de String a int la posiscion 6-10[Integer.parseInt(fecha.substring(6, 10))]
		si <dia >28 and mes = 2> hacer
			si <anio%400 = 0 or anio%100 <> 0 and anio%4 = 0>
			sino
				mostrar que no es bisiesto
			fin sino
		sino
		boolean -> dia >0 and dia <=dias mes(mes-1)
		fin sino
	sino
		boolean false
	fin sino
	return boolean
FIN FECHA

INICIO MATRICULA
	si <matricula con letras mayusculas contiene (4 numeros y 3 letras)[matricula.toUpperCase().matches("^[0-9]{4}[A-Z]{3}$")]>
		retorna true
	sino 
		retorna false
FIN MATRICULA

INICIO COMBUSTIBLE
	si es <diesel,gasolia,electrico,gasoil> hacer
		valido->true
	sino
		mostrar que <no es un combustible valido>
FIN COMBUSTIBLE	

INICIO NUMERO MOVIL
	si <movil primer caracter sea 6 o 7 y movil debe tener 9 numeros[movil.substring(0,1) || movil.substring(0,1)=7 && movil.matches("[0-9]+")]>
		retorna true 
	sino
		retorna false
FIN NUMERO MOVIL

INICIO NUMERO ENTERO
	//es para comprobar que cuando piden numeros y escriben otras cosas no se rompa el programa 
	si <numero contiene numeros [numero.matches("[0-9]+")]>
	retorna true
	sino 
	retorna false
FIN NUMERO ENTERO

INICIO NUMERO DECIMAL
	si escribe alguna coma pasala a punto [usa .replace (',','.')]
	asignarle a una variable el numero (ejemplo<-numero introducido)
	para i < (tamaño de la variable) incrementa
		si <un caracter de la variable es = '.'> hacer
		contador aumenta
		fin si
	fin para 
	si <contador = 1> hacer
		variable<-posicion del punto ( numeroD.indexOf('.'))
		si<posicion esta la primera o la ultima> hacer
			boolean <-false
		sino
			variable1<-obtiene los numeros desde el comienzo hasta el punto
			variable2<- obtiene los numeros desde el punto hasta el final
			para <j < tamaño de variable1 incrementa> hacer
				si <los caracteres no son digitos(Character.isDigit(variable1.charAt(j))> hacer
					boolean<-false
				fin si
			fin para
			si <boolean<-true> hacer
				para < x< tamaño de variable2 incrementa> hacer
					si <los caracteres no son digitos(Character.isDigit(variable2.charAt(j))> hacer
						boolean<-false
					fin si
				fin para
			fin si
	sino
		boolean<-false
	fin si
	retorna boolean
FIN NUMERO DECIMAL

INICIO FECHA DE NACIMIENTO
	variable array <- [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	si <fecha contiene (la posicion 0[numeros del 0-9] y 2[numeros del 1-9] /la posicion 2[numeros del 0-2] y 5[numeros del 1-9]/debe tener 4 nuemeros que contenga del 1-9)[.matches("^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$")]> hacer
		dia<-obtiene el numero de fecha que esta en la posicion 0-2
		mes<-obtiene el numero de fecha que esta en la posicion 3-5
		anio<-obtiene el numero de fecha que esta en la posicion 6-10
		anio2<-obtiene el año actual
		si <dia=28 and mes 2> hacer
			si <anio%400 = 0 or anio%100 <> 0 and anio%4 = 0> hacer
				boolean<- true
			sino
				mostrar <error>
				boolean false
			fin si
		sino
			boolean<-(dia> 0 and dia< variable array[mes-1])
		fin si
		si <(anio2 - anio)>= 0 and (anio2-anio) < 18> hacer
			mostrar <menor de edad>
		sino <(anio2-anio)<0> hacer
			mostrar <no nacido>
		sino
			boolean<-true
	sino
		mostrar<error>
		boolean<-false
	fin si
	retorna boolean	
FIN FECHA DE NACIMIENTO

INICIO FECHA ACTUAL //solo cambia el orden
	variable<-localdatetime.now()
	variable2<-variable.tolocaldate()
	variable3<- convertir en una cadena de texto variable2
	dia<-obtiene el numero de variable que esta en la posicion 8-10
	mes<-obtiene el numero de variable que esta en la posicion 5-7
	anio<-obtiene el numero de variable que esta en la posicion 0-4
	variable3<- dia/mes/anio
	retorna variable3
FIN FECHA ACTUAL

INICIO HORA ACTUAL
	variable 1<-localdatetime.now()
	variable 2<-variable1.tolocaltime()
	variable 3<- convertir en una cadena de texto variable2
	variable 4<- obtiene la posicion del punto que separa las milesimas
	variable 3<- obtiene los numero desde el 0 hasta el punto
FIN HORA ACTUAL


¡¡VIVA EL BRAWL STARS!!
by: Brandon Ramirez
