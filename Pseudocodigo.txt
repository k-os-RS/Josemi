INICIO PERSONAS tipo abstracto
	variables (dni, nombre, apellidos, telefono_movil, fecha_nacimiento, cuenta_bancaria, direccion, tipo_persona,sueldo)
	crear getter y setter de las variables
FIN PERSONAS
INICIO ASESOR HEREDA DE PERSONAS
	variable trabajo_asesor<-"Asesor"
	crear constructor vacio,getter, setter y toString
FIN ASESOR
INICIO MECANICO HEREDA DE PERSONAS
	variable trabajo_mecanico<- "Mecanico"
	crear constructor vacio,getter, setter y toString
FIN MECANICO
INICIO CLIENTE HEREDA DE PERSONAS
	variables compraCoche, compraMoto
	crear constructor vacio,getter, setter y toString
FIN CLIENTE
INICIO VEHICULOS tipo abstracto
	variables (matricula, modelo, color, combustible, plazas,precio, kilometro)
	crear getter y setter de las variables
FIN VEHICULOS
INICIO COCHES HEREDA DE VEHICULO
	variables(enReparacionCoche, vendidoCoche)
	crear constructor vacio,getter, setter y toString
FIN COCHES
INICIO MOTOS HEREDA DE VEHICULO
	VARIABLES(enReparacionMoto, vendidoMoto)
	crear constructor vacio,getter, setter y toString
FIN MOTOS
INICIO MAIN 
	Crear objeto 
	Crear ArrayList
	hacer
		Preguntar si es Administrador, Empleado
		según <opcion>
		caso “Administrador”:
			//la primera vez que entra debe crear una cuenta admin
			Pregunta nombre de admin e introduce por teclado
			Pregunta la contraseña e introduce por teclado
			Preguntar Dinero Base>=(50000)
			//Fin de la primera vez :V
			Mostrar"Menu (alta/baja mostrar  vehiculo,empleado,modificar)"
			segun opcion
			caso alta empleado:
				Introducir datos(tipo de empleado,nombre,apellido,DNI,fecha de nacimiento,Cuenta bancaria,Direccion,Sueldo)
			caso baja empleado:
				Mostrar “Que trabajador quiere dar de baja?”
				Mostrar “Introduce DNI”
				Escribe dni
				Mostrar objeto y pedir confirmacion
				//borrar objeto
			caso mostrar empleado:
				Mostrar “Que trabajador quiere ver?”
				Mostrar “Introduce DNI”
				Escribe dni
				//mostrar objeto
			caso modificar empleado:
				Mostrar “Que trabajador quiere modificar?”
				Mostrar “Introduce DNI”
				Escribe dni
				//mostrar objeto
				Preguntar "que quiere modificar"
				Mostrar opciones
				//edita y guarda objeto
			caso alta vehiculo:
				Mostrar "Que vehiculo quiere añadir?"
					"coche o moto"
				si "coche" hacer
					Mostrar “Introduce datos”
					Escribe datos de coche con relacion a vehiculo
					//indicar precio que vale
				si "moto" hacer
					Mostrar “Introduce datos”
					Escribe datos de moto con relacion a vehiculo
					//indicar precio que vale
			caso baja vehiculo:
				Mostrar "Que vehiculo quiere dar de baja?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				Mostrar objeto y pedir confirmacion
				//borrar objeto
			caso mostrar vehiculo:
				Mostrar "Que vehiculo quiere ver?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				mostrar objeto
			caso modificar vehiculo:
				Mostrar "Que vehiculo quiere modificar?"
				Mostrar “Introduce matricula”
				Escribe matricula de coche con relacion a vehiculo
				mostrar objeto
				Preguntar "que quiere modificar"
				Mostrar opciones
				//edita y guarda objeto
			
		Caso “trabajador”:
			segun dni
			caso “Asesor(compra/venta) derivar/comprobar garantia”:
				Mostrar “Vender/Comprar”
				Segun  <opcion>
				caso vender:
				Preguntar “coche o moto”
					si “coche”
						pregunta “modelo,color,combustible,plazas”
						guardar en objeto
						Mostrar coches con esas caracteristicas,km y precio
						pregunta “quiere accesorios?”
						Generar matricula 
						Pregunta si quiere modificarla 
					si “moto”
						pregunta “modelo,color,combustible,plazas”
						Mostrar coches con esas caracteristicas,km y precio
						pregunta “quiere accesorios?”
						Generar matricula 
						Pregunta si quiere modificarla 
						+el dinero base
		
				caso comprar:
				Preguntar “coche o moto”
					si “coche”
						pregunta “modelo,color,combustible,plazas”
						guardar en objeto
						Mostrar coches con esas caracteristicas,km y precio
						pregunta “quiere accesorios?”
						Generar matricula 
						Pregunta si quiere modificarla 
					si “moto”
						pregunta “modelo,color,combustible,plazas”
						Mostrar coches con esas caracteristicas,km y precio
						pregunta “quiere accesorios?”
						Generar matricula 
						Pregunta si quiere modificarla 

		caso “Mecanico”:
			Mostrar “Tiene garantia ?”
			segun respuesta
			si <si>:
				Mostrar "Que tipo de incidente tuvo?"
				(leve[arañazo,abollon],medio[pieza arrancada,],grave[gran parte del vehiculo dañado])
				segun <opcion>
				caso leve:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				caso medio:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				caso grave:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				mostrar que se lo cubre el seguro
			sino
			Mostrar "Que tipo de incidente tuvo?"
				(leve[arañazo,abollon],medio[pieza arrancada,],grave[gran parte del vehiculo dañado])
				segun <opcion>
				caso leve:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				caso medio:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				caso grave:
					mostrar componentes que estan dentro de leve y su precio
					elejir componente
					+dinerobase
				mostrar cuanto se le cobrara
				guardar en objeto
	mientras<bucle>

FIN


INICIO DNI
	nombre de metodo<- validar
	llamamiento <- dni,validado
	valido<-false
	caracter<-0
	miDNI <- 0
	resto <- 0
	i <- 0
	asigletra[]<-('T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X','B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E')
	//comprobar si el dni recibido tiene 9 caracteres y si la ultima es una letra
	si <dni.length<-9 and Character.isLetter(dni.charAt(8))> hacer
		hacer
		caracter <- dni.codePointAt(i)
			//la suma de los caracteres este en el rango de <47 y 58>
         	       valido <-(caracter > 47 && caracter < 58)
                	incrementa i
		mientras(i < dni.length-1 and valido)
	fin si
	//comprueba que el ultimo caracter sea en mayuscula  y hace la operacon que da la letra del dni valido
	si <valido> hacer
		letra <- Character.toUpperCase(dni.charAt(8));
           	miDNI <- pasalo a entero [ Integer.parseInt(dni.substring(0,8))];
           	resto <- miDNI % 23;
           	valido <- (letra=asigLetra[resto]);
	fin si
	validado<-valido
	retorna validado(true o false)
	FIN DNI


	INICIO MATRICULA
	si <matricula con letras mayusculas contiene (4 numeros y 3 letras)[matricula.toUpperCase().matches("^[0-9]{4}[A-Z]{3}$")]>
		retorna true
	sino 
		retorna false
FIN MATRICULA

INICIO TELEFONO
	si <movil primer caracter sea 6 o 7 y movil debe tener 9 numeros[movil.substring(0,1) || movil.substring(0,1)=7 && movil.matches("[0-9]+")]>
		retorna true 
	sino
		retorna false
FIN TELEFONO

INICIO PUNTO 
	si escribe alguna coma pasala a punto [usa .replace (',','.')]
FIN PUNTO

INICIO NUMERO
	//es para comprobar que cuando piden numeros y escriben otras cosas no se rompa el programa 
	si <numero contiene numeros [numero.matches("[0-9]+")]>
	retorna true
	sino 
	retorna false
FIN NUMERO

INICIO COMBUSTIBLE
	si es <diesel,gasolia,electricidad> hacer
		valido->true
	sino
		mostrar que <no es un combustible valido>
FIN COMBUSTIBLE	

INICIO FECHA
	//con un boolean y un array de entero
	diasMes= {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	si <fecha contiene numeros en las posiciones 0-2/3-5/6-10 [fecha.matches("^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$")]> hacer
		entero	{dia<-convertir de String a int la posiscion 0-2[Integer.parseInt(fecha.substring(0, 2))]
			{mes<-convertir de String a int la posiscion 3-5[Integer.parseInt(fecha.substring(3, 5))]
			{anio<-convertir de String a int la posiscion 6-10[Integer.parseInt(fecha.substring(6, 10))]
		si <dia >28 and mes = 2> hacer
			si <anio%400 = 0 or anio%100 <> 0 and anio%4 = 0>
			sino
				mostrar que no es bisiesto
			fin sino
		sino
		boolean -> dia >0 and dia <=dias mes(mes-1)
		fin sino
	sino
		boolean false
	fin sino
	return boolean
FIN FECHA
